//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WitsClassesTests.WitsService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WitsService.IActiveGame", CallbackContract=typeof(WitsClassesTests.WitsService.IActiveGameCallback))]
    public interface IActiveGame {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/RegisterUserInGameContext")]
        void RegisterUserInGameContext(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/RegisterUserInGameContext")]
        System.Threading.Tasks.Task RegisterUserInGameContextAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/UnregisterUserInGameContext")]
        void UnregisterUserInGameContext(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/UnregisterUserInGameContext")]
        System.Threading.Tasks.Task UnregisterUserInGameContextAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ExpelPlayer")]
        void ExpelPlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ExpelPlayer")]
        System.Threading.Tasks.Task ExpelPlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/SavePlayerAnswer")]
        void SavePlayerAnswer(int playerNumber, string answer, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/SavePlayerAnswer")]
        System.Threading.Tasks.Task SavePlayerAnswerAsync(int playerNumber, string answer, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ReceivePlayerSelectedAnswer")]
        void ReceivePlayerSelectedAnswer(int playerNumber, int selectedAnswer, int idProfilePicture, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ReceivePlayerSelectedAnswer")]
        System.Threading.Tasks.Task ReceivePlayerSelectedAnswerAsync(int playerNumber, int selectedAnswer, int idProfilePicture, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ReadyToWager")]
        void ReadyToWager(int gameId, int playerNumber, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ReadyToWager")]
        System.Threading.Tasks.Task ReadyToWagerAsync(int gameId, int playerNumber, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ReadyToShowAnswer")]
        void ReadyToShowAnswer(int gameId, int playerNumber, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ReadyToShowAnswer")]
        System.Threading.Tasks.Task ReadyToShowAnswerAsync(int gameId, int playerNumber, bool isReady);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/GameEnded")]
        void GameEnded(int gameId, int playerNumber, bool isRegistered);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/GameEnded")]
        System.Threading.Tasks.Task GameEndedAsync(int gameId, int playerNumber, bool isRegistered);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/WhoWon")]
        void WhoWon(int gameId, int numberPlayer, string userName, int idCelebration, int score, int idProfilePicture);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/WhoWon")]
        System.Threading.Tasks.Task WhoWonAsync(int gameId, int numberPlayer, string userName, int idCelebration, int score, int idProfilePicture);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ShowWinner")]
        void ShowWinner(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/ShowWinner")]
        System.Threading.Tasks.Task ShowWinnerAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/CleanWinners")]
        void CleanWinners(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IActiveGame/CleanWinners")]
        System.Threading.Tasks.Task CleanWinnersAsync(int gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActiveGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/UpdateAnswers", ReplyAction="http://tempuri.org/IActiveGame/UpdateAnswersResponse")]
        void UpdateAnswers(System.Collections.Generic.Dictionary<int, string> playerAnswers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/UpdateSelection", ReplyAction="http://tempuri.org/IActiveGame/UpdateSelectionResponse")]
        void UpdateSelection(System.Collections.Generic.Dictionary<int, WitsClasses.Contracts.PlayerSelectedAnswer> playerSelectedAnswers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/ShowEnterWager", ReplyAction="http://tempuri.org/IActiveGame/ShowEnterWagerResponse")]
        void ShowEnterWager();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/ShowTrueAnswer", ReplyAction="http://tempuri.org/IActiveGame/ShowTrueAnswerResponse")]
        void ShowTrueAnswer();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/BeExpelled", ReplyAction="http://tempuri.org/IActiveGame/BeExpelledResponse")]
        void BeExpelled();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/ShowVictoryScreen", ReplyAction="http://tempuri.org/IActiveGame/ShowVictoryScreenResponse")]
        void ShowVictoryScreen(string userName, int profilePictureId, int celebrationId, int score);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IActiveGame/TieBreaker", ReplyAction="http://tempuri.org/IActiveGame/TieBreakerResponse")]
        void TieBreaker();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IActiveGameChannel : WitsClassesTests.WitsService.IActiveGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActiveGameClient : System.ServiceModel.DuplexClientBase<WitsClassesTests.WitsService.IActiveGame>, WitsClassesTests.WitsService.IActiveGame {
        
        public ActiveGameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ActiveGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ActiveGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ActiveGameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ActiveGameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterUserInGameContext(string username) {
            base.Channel.RegisterUserInGameContext(username);
        }
        
        public System.Threading.Tasks.Task RegisterUserInGameContextAsync(string username) {
            return base.Channel.RegisterUserInGameContextAsync(username);
        }
        
        public void UnregisterUserInGameContext(string username) {
            base.Channel.UnregisterUserInGameContext(username);
        }
        
        public System.Threading.Tasks.Task UnregisterUserInGameContextAsync(string username) {
            return base.Channel.UnregisterUserInGameContextAsync(username);
        }
        
        public void ExpelPlayer(string username) {
            base.Channel.ExpelPlayer(username);
        }
        
        public System.Threading.Tasks.Task ExpelPlayerAsync(string username) {
            return base.Channel.ExpelPlayerAsync(username);
        }
        
        public void SavePlayerAnswer(int playerNumber, string answer, int gameId) {
            base.Channel.SavePlayerAnswer(playerNumber, answer, gameId);
        }
        
        public System.Threading.Tasks.Task SavePlayerAnswerAsync(int playerNumber, string answer, int gameId) {
            return base.Channel.SavePlayerAnswerAsync(playerNumber, answer, gameId);
        }
        
        public void ReceivePlayerSelectedAnswer(int playerNumber, int selectedAnswer, int idProfilePicture, int gameId) {
            base.Channel.ReceivePlayerSelectedAnswer(playerNumber, selectedAnswer, idProfilePicture, gameId);
        }
        
        public System.Threading.Tasks.Task ReceivePlayerSelectedAnswerAsync(int playerNumber, int selectedAnswer, int idProfilePicture, int gameId) {
            return base.Channel.ReceivePlayerSelectedAnswerAsync(playerNumber, selectedAnswer, idProfilePicture, gameId);
        }
        
        public void ReadyToWager(int gameId, int playerNumber, bool isReady) {
            base.Channel.ReadyToWager(gameId, playerNumber, isReady);
        }
        
        public System.Threading.Tasks.Task ReadyToWagerAsync(int gameId, int playerNumber, bool isReady) {
            return base.Channel.ReadyToWagerAsync(gameId, playerNumber, isReady);
        }
        
        public void ReadyToShowAnswer(int gameId, int playerNumber, bool isReady) {
            base.Channel.ReadyToShowAnswer(gameId, playerNumber, isReady);
        }
        
        public System.Threading.Tasks.Task ReadyToShowAnswerAsync(int gameId, int playerNumber, bool isReady) {
            return base.Channel.ReadyToShowAnswerAsync(gameId, playerNumber, isReady);
        }
        
        public void GameEnded(int gameId, int playerNumber, bool isRegistered) {
            base.Channel.GameEnded(gameId, playerNumber, isRegistered);
        }
        
        public System.Threading.Tasks.Task GameEndedAsync(int gameId, int playerNumber, bool isRegistered) {
            return base.Channel.GameEndedAsync(gameId, playerNumber, isRegistered);
        }
        
        public void WhoWon(int gameId, int numberPlayer, string userName, int idCelebration, int score, int idProfilePicture) {
            base.Channel.WhoWon(gameId, numberPlayer, userName, idCelebration, score, idProfilePicture);
        }
        
        public System.Threading.Tasks.Task WhoWonAsync(int gameId, int numberPlayer, string userName, int idCelebration, int score, int idProfilePicture) {
            return base.Channel.WhoWonAsync(gameId, numberPlayer, userName, idCelebration, score, idProfilePicture);
        }
        
        public void ShowWinner(int gameId) {
            base.Channel.ShowWinner(gameId);
        }
        
        public System.Threading.Tasks.Task ShowWinnerAsync(int gameId) {
            return base.Channel.ShowWinnerAsync(gameId);
        }
        
        public void CleanWinners(int gameId) {
            base.Channel.CleanWinners(gameId);
        }
        
        public System.Threading.Tasks.Task CleanWinnersAsync(int gameId) {
            return base.Channel.CleanWinnersAsync(gameId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WitsService.IPlayerManager")]
    public interface IPlayerManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddPlayer", ReplyAction="http://tempuri.org/IPlayerManager/AddPlayerResponse")]
        int AddPlayer(WitsClasses.Contracts.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddPlayer", ReplyAction="http://tempuri.org/IPlayerManager/AddPlayerResponse")]
        System.Threading.Tasks.Task<int> AddPlayerAsync(WitsClasses.Contracts.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeletePlayer", ReplyAction="http://tempuri.org/IPlayerManager/DeletePlayerResponse")]
        int DeletePlayer(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeletePlayer", ReplyAction="http://tempuri.org/IPlayerManager/DeletePlayerResponse")]
        System.Threading.Tasks.Task<int> DeletePlayerAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/IsPlayerLogged", ReplyAction="http://tempuri.org/IPlayerManager/IsPlayerLoggedResponse")]
        bool IsPlayerLogged(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/IsPlayerLogged", ReplyAction="http://tempuri.org/IPlayerManager/IsPlayerLoggedResponse")]
        System.Threading.Tasks.Task<bool> IsPlayerLoggedAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerByUser", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerByUserResponse")]
        WitsClasses.Contracts.Player GetPlayerByUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerByUser", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerByUserResponse")]
        System.Threading.Tasks.Task<WitsClasses.Contracts.Player> GetPlayerByUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerByUserAndPassword", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerByUserAndPasswordResponse")]
        WitsClasses.Contracts.Player GetPlayerByUserAndPassword(string username, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerByUserAndPassword", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerByUserAndPasswordResponse")]
        System.Threading.Tasks.Task<WitsClasses.Contracts.Player> GetPlayerByUserAndPasswordAsync(string username, string userPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdatePassword", ReplyAction="http://tempuri.org/IPlayerManager/UpdatePasswordResponse")]
        int UpdatePassword(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdatePassword", ReplyAction="http://tempuri.org/IPlayerManager/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<int> UpdatePasswordAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerFriends", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerFriendsResponse")]
        string[] GetPlayerFriends(string playerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerFriends", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerFriendsResponse")]
        System.Threading.Tasks.Task<string[]> GetPlayerFriendsAsync(string playerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetAllPlayerRequests", ReplyAction="http://tempuri.org/IPlayerManager/GetAllPlayerRequestsResponse")]
        string[] GetAllPlayerRequests(string playerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetAllPlayerRequests", ReplyAction="http://tempuri.org/IPlayerManager/GetAllPlayerRequestsResponse")]
        System.Threading.Tasks.Task<string[]> GetAllPlayerRequestsAsync(string playerUsername);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerRequest", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerRequestResponse")]
        string GetPlayerRequest(string playerFrom, string playerTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/GetPlayerRequest", ReplyAction="http://tempuri.org/IPlayerManager/GetPlayerRequestResponse")]
        System.Threading.Tasks.Task<string> GetPlayerRequestAsync(string playerFrom, string playerTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddRequest", ReplyAction="http://tempuri.org/IPlayerManager/AddRequestResponse")]
        int AddRequest(string from, string to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddRequest", ReplyAction="http://tempuri.org/IPlayerManager/AddRequestResponse")]
        System.Threading.Tasks.Task<int> AddRequestAsync(string from, string to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AcceptRequest", ReplyAction="http://tempuri.org/IPlayerManager/AcceptRequestResponse")]
        int AcceptRequest(string receiver, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AcceptRequest", ReplyAction="http://tempuri.org/IPlayerManager/AcceptRequestResponse")]
        System.Threading.Tasks.Task<int> AcceptRequestAsync(string receiver, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/RejectRequest", ReplyAction="http://tempuri.org/IPlayerManager/RejectRequestResponse")]
        int RejectRequest(string receiver, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/RejectRequest", ReplyAction="http://tempuri.org/IPlayerManager/RejectRequestResponse")]
        System.Threading.Tasks.Task<int> RejectRequestAsync(string receiver, string sender);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeleteRequest", ReplyAction="http://tempuri.org/IPlayerManager/DeleteRequestResponse")]
        int DeleteRequest(string receiver, string sender, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeleteRequest", ReplyAction="http://tempuri.org/IPlayerManager/DeleteRequestResponse")]
        System.Threading.Tasks.Task<int> DeleteRequestAsync(string receiver, string sender, int status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddFriendship", ReplyAction="http://tempuri.org/IPlayerManager/AddFriendshipResponse")]
        int AddFriendship(string player, string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/AddFriendship", ReplyAction="http://tempuri.org/IPlayerManager/AddFriendshipResponse")]
        System.Threading.Tasks.Task<int> AddFriendshipAsync(string player, string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeleteFriendship", ReplyAction="http://tempuri.org/IPlayerManager/DeleteFriendshipResponse")]
        int DeleteFriendship(string player, string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/DeleteFriendship", ReplyAction="http://tempuri.org/IPlayerManager/DeleteFriendshipResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendshipAsync(string player, string friend);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/IsPlayerBlocked", ReplyAction="http://tempuri.org/IPlayerManager/IsPlayerBlockedResponse")]
        bool IsPlayerBlocked(string player, string blockedPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/IsPlayerBlocked", ReplyAction="http://tempuri.org/IPlayerManager/IsPlayerBlockedResponse")]
        System.Threading.Tasks.Task<bool> IsPlayerBlockedAsync(string player, string blockedPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/BlockPlayer", ReplyAction="http://tempuri.org/IPlayerManager/BlockPlayerResponse")]
        int BlockPlayer(string player, string blockedPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/BlockPlayer", ReplyAction="http://tempuri.org/IPlayerManager/BlockPlayerResponse")]
        System.Threading.Tasks.Task<int> BlockPlayerAsync(string player, string blockedPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateProfilePicture", ReplyAction="http://tempuri.org/IPlayerManager/UpdateProfilePictureResponse")]
        bool UpdateProfilePicture(string username, int profilePictureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateProfilePicture", ReplyAction="http://tempuri.org/IPlayerManager/UpdateProfilePictureResponse")]
        System.Threading.Tasks.Task<bool> UpdateProfilePictureAsync(string username, int profilePictureId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateCelebration", ReplyAction="http://tempuri.org/IPlayerManager/UpdateCelebrationResponse")]
        bool UpdateCelebration(string username, int celebrationId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayerManager/UpdateCelebration", ReplyAction="http://tempuri.org/IPlayerManager/UpdateCelebrationResponse")]
        System.Threading.Tasks.Task<bool> UpdateCelebrationAsync(string username, int celebrationId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayerManagerChannel : WitsClassesTests.WitsService.IPlayerManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayerManagerClient : System.ServiceModel.ClientBase<WitsClassesTests.WitsService.IPlayerManager>, WitsClassesTests.WitsService.IPlayerManager {
        
        public PlayerManagerClient() {
        }
        
        public PlayerManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PlayerManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PlayerManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddPlayer(WitsClasses.Contracts.Player player) {
            return base.Channel.AddPlayer(player);
        }
        
        public System.Threading.Tasks.Task<int> AddPlayerAsync(WitsClasses.Contracts.Player player) {
            return base.Channel.AddPlayerAsync(player);
        }
        
        public int DeletePlayer(string username) {
            return base.Channel.DeletePlayer(username);
        }
        
        public System.Threading.Tasks.Task<int> DeletePlayerAsync(string username) {
            return base.Channel.DeletePlayerAsync(username);
        }
        
        public bool IsPlayerLogged(string username) {
            return base.Channel.IsPlayerLogged(username);
        }
        
        public System.Threading.Tasks.Task<bool> IsPlayerLoggedAsync(string username) {
            return base.Channel.IsPlayerLoggedAsync(username);
        }
        
        public WitsClasses.Contracts.Player GetPlayerByUser(string username) {
            return base.Channel.GetPlayerByUser(username);
        }
        
        public System.Threading.Tasks.Task<WitsClasses.Contracts.Player> GetPlayerByUserAsync(string username) {
            return base.Channel.GetPlayerByUserAsync(username);
        }
        
        public WitsClasses.Contracts.Player GetPlayerByUserAndPassword(string username, string userPassword) {
            return base.Channel.GetPlayerByUserAndPassword(username, userPassword);
        }
        
        public System.Threading.Tasks.Task<WitsClasses.Contracts.Player> GetPlayerByUserAndPasswordAsync(string username, string userPassword) {
            return base.Channel.GetPlayerByUserAndPasswordAsync(username, userPassword);
        }
        
        public int UpdatePassword(string username, string password) {
            return base.Channel.UpdatePassword(username, password);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePasswordAsync(string username, string password) {
            return base.Channel.UpdatePasswordAsync(username, password);
        }
        
        public string[] GetPlayerFriends(string playerUsername) {
            return base.Channel.GetPlayerFriends(playerUsername);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPlayerFriendsAsync(string playerUsername) {
            return base.Channel.GetPlayerFriendsAsync(playerUsername);
        }
        
        public string[] GetAllPlayerRequests(string playerUsername) {
            return base.Channel.GetAllPlayerRequests(playerUsername);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllPlayerRequestsAsync(string playerUsername) {
            return base.Channel.GetAllPlayerRequestsAsync(playerUsername);
        }
        
        public string GetPlayerRequest(string playerFrom, string playerTo) {
            return base.Channel.GetPlayerRequest(playerFrom, playerTo);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerRequestAsync(string playerFrom, string playerTo) {
            return base.Channel.GetPlayerRequestAsync(playerFrom, playerTo);
        }
        
        public int AddRequest(string from, string to) {
            return base.Channel.AddRequest(from, to);
        }
        
        public System.Threading.Tasks.Task<int> AddRequestAsync(string from, string to) {
            return base.Channel.AddRequestAsync(from, to);
        }
        
        public int AcceptRequest(string receiver, string sender) {
            return base.Channel.AcceptRequest(receiver, sender);
        }
        
        public System.Threading.Tasks.Task<int> AcceptRequestAsync(string receiver, string sender) {
            return base.Channel.AcceptRequestAsync(receiver, sender);
        }
        
        public int RejectRequest(string receiver, string sender) {
            return base.Channel.RejectRequest(receiver, sender);
        }
        
        public System.Threading.Tasks.Task<int> RejectRequestAsync(string receiver, string sender) {
            return base.Channel.RejectRequestAsync(receiver, sender);
        }
        
        public int DeleteRequest(string receiver, string sender, int status) {
            return base.Channel.DeleteRequest(receiver, sender, status);
        }
        
        public System.Threading.Tasks.Task<int> DeleteRequestAsync(string receiver, string sender, int status) {
            return base.Channel.DeleteRequestAsync(receiver, sender, status);
        }
        
        public int AddFriendship(string player, string friend) {
            return base.Channel.AddFriendship(player, friend);
        }
        
        public System.Threading.Tasks.Task<int> AddFriendshipAsync(string player, string friend) {
            return base.Channel.AddFriendshipAsync(player, friend);
        }
        
        public int DeleteFriendship(string player, string friend) {
            return base.Channel.DeleteFriendship(player, friend);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendshipAsync(string player, string friend) {
            return base.Channel.DeleteFriendshipAsync(player, friend);
        }
        
        public bool IsPlayerBlocked(string player, string blockedPlayer) {
            return base.Channel.IsPlayerBlocked(player, blockedPlayer);
        }
        
        public System.Threading.Tasks.Task<bool> IsPlayerBlockedAsync(string player, string blockedPlayer) {
            return base.Channel.IsPlayerBlockedAsync(player, blockedPlayer);
        }
        
        public int BlockPlayer(string player, string blockedPlayer) {
            return base.Channel.BlockPlayer(player, blockedPlayer);
        }
        
        public System.Threading.Tasks.Task<int> BlockPlayerAsync(string player, string blockedPlayer) {
            return base.Channel.BlockPlayerAsync(player, blockedPlayer);
        }
        
        public bool UpdateProfilePicture(string username, int profilePictureId) {
            return base.Channel.UpdateProfilePicture(username, profilePictureId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateProfilePictureAsync(string username, int profilePictureId) {
            return base.Channel.UpdateProfilePictureAsync(username, profilePictureId);
        }
        
        public bool UpdateCelebration(string username, int celebrationId) {
            return base.Channel.UpdateCelebration(username, celebrationId);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCelebrationAsync(string username, int celebrationId) {
            return base.Channel.UpdateCelebrationAsync(username, celebrationId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WitsService.IConnectedUsers", CallbackContract=typeof(WitsClassesTests.WitsService.IConnectedUsersCallback))]
    public interface IConnectedUsers {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/AddConnectedUser")]
        void AddConnectedUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/AddConnectedUser")]
        System.Threading.Tasks.Task AddConnectedUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/AddConnectedUserInMenu")]
        void AddConnectedUserInMenu(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/AddConnectedUserInMenu")]
        System.Threading.Tasks.Task AddConnectedUserInMenuAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/RemoveConnectedUserInMenu")]
        void RemoveConnectedUserInMenu(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/RemoveConnectedUserInMenu")]
        System.Threading.Tasks.Task RemoveConnectedUserInMenuAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/RemoveConnectedUser")]
        void RemoveConnectedUser(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IConnectedUsers/RemoveConnectedUser")]
        System.Threading.Tasks.Task RemoveConnectedUserAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/RemoveFromEverywhere", ReplyAction="http://tempuri.org/IConnectedUsers/RemoveFromEverywhereResponse")]
        void RemoveFromEverywhere(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/RemoveFromEverywhere", ReplyAction="http://tempuri.org/IConnectedUsers/RemoveFromEverywhereResponse")]
        System.Threading.Tasks.Task RemoveFromEverywhereAsync(string user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/UpdateFriendsForAll", ReplyAction="http://tempuri.org/IConnectedUsers/UpdateFriendsForAllResponse")]
        void UpdateFriendsForAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/UpdateFriendsForAll", ReplyAction="http://tempuri.org/IConnectedUsers/UpdateFriendsForAllResponse")]
        System.Threading.Tasks.Task UpdateFriendsForAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/GetConnectedFriends", ReplyAction="http://tempuri.org/IConnectedUsers/GetConnectedFriendsResponse")]
        string[] GetConnectedFriends(string principalPlayer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/GetConnectedFriends", ReplyAction="http://tempuri.org/IConnectedUsers/GetConnectedFriendsResponse")]
        System.Threading.Tasks.Task<string[]> GetConnectedFriendsAsync(string principalPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectedUsersCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IConnectedUsers/UpdateConnectedFriends", ReplyAction="http://tempuri.org/IConnectedUsers/UpdateConnectedFriendsResponse")]
        void UpdateConnectedFriends();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IConnectedUsersChannel : WitsClassesTests.WitsService.IConnectedUsers, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ConnectedUsersClient : System.ServiceModel.DuplexClientBase<WitsClassesTests.WitsService.IConnectedUsers>, WitsClassesTests.WitsService.IConnectedUsers {
        
        public ConnectedUsersClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ConnectedUsersClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ConnectedUsersClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectedUsersClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ConnectedUsersClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void AddConnectedUser(string username) {
            base.Channel.AddConnectedUser(username);
        }
        
        public System.Threading.Tasks.Task AddConnectedUserAsync(string username) {
            return base.Channel.AddConnectedUserAsync(username);
        }
        
        public void AddConnectedUserInMenu(string username) {
            base.Channel.AddConnectedUserInMenu(username);
        }
        
        public System.Threading.Tasks.Task AddConnectedUserInMenuAsync(string username) {
            return base.Channel.AddConnectedUserInMenuAsync(username);
        }
        
        public void RemoveConnectedUserInMenu(string username) {
            base.Channel.RemoveConnectedUserInMenu(username);
        }
        
        public System.Threading.Tasks.Task RemoveConnectedUserInMenuAsync(string username) {
            return base.Channel.RemoveConnectedUserInMenuAsync(username);
        }
        
        public void RemoveConnectedUser(string username) {
            base.Channel.RemoveConnectedUser(username);
        }
        
        public System.Threading.Tasks.Task RemoveConnectedUserAsync(string username) {
            return base.Channel.RemoveConnectedUserAsync(username);
        }
        
        public void RemoveFromEverywhere(string user) {
            base.Channel.RemoveFromEverywhere(user);
        }
        
        public System.Threading.Tasks.Task RemoveFromEverywhereAsync(string user) {
            return base.Channel.RemoveFromEverywhereAsync(user);
        }
        
        public void UpdateFriendsForAll() {
            base.Channel.UpdateFriendsForAll();
        }
        
        public System.Threading.Tasks.Task UpdateFriendsForAllAsync() {
            return base.Channel.UpdateFriendsForAllAsync();
        }
        
        public string[] GetConnectedFriends(string principalPlayer) {
            return base.Channel.GetConnectedFriends(principalPlayer);
        }
        
        public System.Threading.Tasks.Task<string[]> GetConnectedFriendsAsync(string principalPlayer) {
            return base.Channel.GetConnectedFriendsAsync(principalPlayer);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WitsService.IGameManager")]
    public interface IGameManager {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/CreateGame", ReplyAction="http://tempuri.org/IGameManager/CreateGameResponse")]
        void CreateGame(int gameId, string gameLeader);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/CreateGame", ReplyAction="http://tempuri.org/IGameManager/CreateGameResponse")]
        System.Threading.Tasks.Task CreateGameAsync(int gameId, string gameLeader);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/JoinGame", ReplyAction="http://tempuri.org/IGameManager/JoinGameResponse")]
        int JoinGame(int gameId, string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/JoinGame", ReplyAction="http://tempuri.org/IGameManager/JoinGameResponse")]
        System.Threading.Tasks.Task<int> JoinGameAsync(int gameId, string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RemovePlayerInGame", ReplyAction="http://tempuri.org/IGameManager/RemovePlayerInGameResponse")]
        int RemovePlayerInGame(int gameId, string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/RemovePlayerInGame", ReplyAction="http://tempuri.org/IGameManager/RemovePlayerInGameResponse")]
        System.Threading.Tasks.Task<int> RemovePlayerInGameAsync(int gameId, string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetScores", ReplyAction="http://tempuri.org/IGameManager/GetScoresResponse")]
        System.Collections.Generic.Dictionary<string, int> GetScores(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetScores", ReplyAction="http://tempuri.org/IGameManager/GetScoresResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetScoresAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetPlayersOfGameExceptLeader", ReplyAction="http://tempuri.org/IGameManager/GetPlayersOfGameExceptLeaderResponse")]
        string[] GetPlayersOfGameExceptLeader(int gameId, string leaderUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetPlayersOfGameExceptLeader", ReplyAction="http://tempuri.org/IGameManager/GetPlayersOfGameExceptLeaderResponse")]
        System.Threading.Tasks.Task<string[]> GetPlayersOfGameExceptLeaderAsync(int gameId, string leaderUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ModifyScore", ReplyAction="http://tempuri.org/IGameManager/ModifyScoreResponse")]
        void ModifyScore(int gameId, string playerId, int credits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/ModifyScore", ReplyAction="http://tempuri.org/IGameManager/ModifyScoreResponse")]
        System.Threading.Tasks.Task ModifyScoreAsync(int gameId, string playerId, int credits);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetPlayerScore", ReplyAction="http://tempuri.org/IGameManager/GetPlayerScoreResponse")]
        int GetPlayerScore(int gameId, string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetPlayerScore", ReplyAction="http://tempuri.org/IGameManager/GetPlayerScoreResponse")]
        System.Threading.Tasks.Task<int> GetPlayerScoreAsync(int gameId, string playerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGameLeader", ReplyAction="http://tempuri.org/IGameManager/GetGameLeaderResponse")]
        string GetGameLeader(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetGameLeader", ReplyAction="http://tempuri.org/IGameManager/GetGameLeaderResponse")]
        System.Threading.Tasks.Task<string> GetGameLeaderAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetQuestionByID", ReplyAction="http://tempuri.org/IGameManager/GetQuestionByIDResponse")]
        WitsClasses.Contracts.Question GetQuestionByID(int questionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetQuestionByID", ReplyAction="http://tempuri.org/IGameManager/GetQuestionByIDResponse")]
        System.Threading.Tasks.Task<WitsClasses.Contracts.Question> GetQuestionByIDAsync(int questionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetRandomQuestionId", ReplyAction="http://tempuri.org/IGameManager/GetRandomQuestionIdResponse")]
        int GetRandomQuestionId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetRandomQuestionId", ReplyAction="http://tempuri.org/IGameManager/GetRandomQuestionIdResponse")]
        System.Threading.Tasks.Task<int> GetRandomQuestionIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetQuestionIds", ReplyAction="http://tempuri.org/IGameManager/GetQuestionIdsResponse")]
        int[] GetQuestionIds(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGameManager/GetQuestionIds", ReplyAction="http://tempuri.org/IGameManager/GetQuestionIdsResponse")]
        System.Threading.Tasks.Task<int[]> GetQuestionIdsAsync(int gameId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameManagerChannel : WitsClassesTests.WitsService.IGameManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameManagerClient : System.ServiceModel.ClientBase<WitsClassesTests.WitsService.IGameManager>, WitsClassesTests.WitsService.IGameManager {
        
        public GameManagerClient() {
        }
        
        public GameManagerClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GameManagerClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GameManagerClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateGame(int gameId, string gameLeader) {
            base.Channel.CreateGame(gameId, gameLeader);
        }
        
        public System.Threading.Tasks.Task CreateGameAsync(int gameId, string gameLeader) {
            return base.Channel.CreateGameAsync(gameId, gameLeader);
        }
        
        public int JoinGame(int gameId, string playerId) {
            return base.Channel.JoinGame(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task<int> JoinGameAsync(int gameId, string playerId) {
            return base.Channel.JoinGameAsync(gameId, playerId);
        }
        
        public int RemovePlayerInGame(int gameId, string playerId) {
            return base.Channel.RemovePlayerInGame(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task<int> RemovePlayerInGameAsync(int gameId, string playerId) {
            return base.Channel.RemovePlayerInGameAsync(gameId, playerId);
        }
        
        public System.Collections.Generic.Dictionary<string, int> GetScores(int gameId) {
            return base.Channel.GetScores(gameId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, int>> GetScoresAsync(int gameId) {
            return base.Channel.GetScoresAsync(gameId);
        }
        
        public string[] GetPlayersOfGameExceptLeader(int gameId, string leaderUser) {
            return base.Channel.GetPlayersOfGameExceptLeader(gameId, leaderUser);
        }
        
        public System.Threading.Tasks.Task<string[]> GetPlayersOfGameExceptLeaderAsync(int gameId, string leaderUser) {
            return base.Channel.GetPlayersOfGameExceptLeaderAsync(gameId, leaderUser);
        }
        
        public void ModifyScore(int gameId, string playerId, int credits) {
            base.Channel.ModifyScore(gameId, playerId, credits);
        }
        
        public System.Threading.Tasks.Task ModifyScoreAsync(int gameId, string playerId, int credits) {
            return base.Channel.ModifyScoreAsync(gameId, playerId, credits);
        }
        
        public int GetPlayerScore(int gameId, string playerId) {
            return base.Channel.GetPlayerScore(gameId, playerId);
        }
        
        public System.Threading.Tasks.Task<int> GetPlayerScoreAsync(int gameId, string playerId) {
            return base.Channel.GetPlayerScoreAsync(gameId, playerId);
        }
        
        public string GetGameLeader(int gameId) {
            return base.Channel.GetGameLeader(gameId);
        }
        
        public System.Threading.Tasks.Task<string> GetGameLeaderAsync(int gameId) {
            return base.Channel.GetGameLeaderAsync(gameId);
        }
        
        public WitsClasses.Contracts.Question GetQuestionByID(int questionId) {
            return base.Channel.GetQuestionByID(questionId);
        }
        
        public System.Threading.Tasks.Task<WitsClasses.Contracts.Question> GetQuestionByIDAsync(int questionId) {
            return base.Channel.GetQuestionByIDAsync(questionId);
        }
        
        public int GetRandomQuestionId() {
            return base.Channel.GetRandomQuestionId();
        }
        
        public System.Threading.Tasks.Task<int> GetRandomQuestionIdAsync() {
            return base.Channel.GetRandomQuestionIdAsync();
        }
        
        public int[] GetQuestionIds(int gameId) {
            return base.Channel.GetQuestionIds(gameId);
        }
        
        public System.Threading.Tasks.Task<int[]> GetQuestionIdsAsync(int gameId) {
            return base.Channel.GetQuestionIdsAsync(gameId);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WitsService.IChatManager", CallbackContract=typeof(WitsClassesTests.WitsService.IChatManagerCallback))]
    public interface IChatManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/SendNewMessage")]
        void SendNewMessage(string message, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/SendNewMessage")]
        System.Threading.Tasks.Task SendNewMessageAsync(string message, int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/RegisterUserContext")]
        void RegisterUserContext(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/RegisterUserContext")]
        System.Threading.Tasks.Task RegisterUserContextAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/StartGame")]
        void StartGame(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/StartGame")]
        System.Threading.Tasks.Task StartGameAsync(int gameId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/UnregisterUserContext")]
        void UnregisterUserContext(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatManager/UnregisterUserContext")]
        System.Threading.Tasks.Task UnregisterUserContextAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/UpdateChat", ReplyAction="http://tempuri.org/IChatManager/UpdateChatResponse")]
        void UpdateChat(string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatManager/StartGamePage", ReplyAction="http://tempuri.org/IChatManager/StartGamePageResponse")]
        void StartGamePage();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatManagerChannel : WitsClassesTests.WitsService.IChatManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatManagerClient : System.ServiceModel.DuplexClientBase<WitsClassesTests.WitsService.IChatManager>, WitsClassesTests.WitsService.IChatManager {
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendNewMessage(string message, int gameId) {
            base.Channel.SendNewMessage(message, gameId);
        }
        
        public System.Threading.Tasks.Task SendNewMessageAsync(string message, int gameId) {
            return base.Channel.SendNewMessageAsync(message, gameId);
        }
        
        public void RegisterUserContext(string username) {
            base.Channel.RegisterUserContext(username);
        }
        
        public System.Threading.Tasks.Task RegisterUserContextAsync(string username) {
            return base.Channel.RegisterUserContextAsync(username);
        }
        
        public void StartGame(int gameId) {
            base.Channel.StartGame(gameId);
        }
        
        public System.Threading.Tasks.Task StartGameAsync(int gameId) {
            return base.Channel.StartGameAsync(gameId);
        }
        
        public void UnregisterUserContext(string username) {
            base.Channel.UnregisterUserContext(username);
        }
        
        public System.Threading.Tasks.Task UnregisterUserContextAsync(string username) {
            return base.Channel.UnregisterUserContextAsync(username);
        }
    }
}
